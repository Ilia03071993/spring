version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zoo
    container_name: zoo
    networks:
      - kafka_network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka
    container_name: kafka
    networks:
      - kafka_network
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 60000
    depends_on:
      - zookeeper

#  audit-service:
#    build: ./audit
#    container_name: audit-service
#    networks:
#      - kafka_network
#    depends_on:
#      - kafka

networks:
  kafka_network:
    name: kafka_docker_network

#services:
#  producer-db:
#      image: mysql
#      container_name: producer-db
#      volumes:
#        - producer-data:/var/lib/mysql
#      ports:
#        - "3308:3307"
#      environment:
#        MYSQL_ROOT_PASSWORD: root
#        MYSQL_DATABASE: producer_db
#        MYSQL_TCP_PORT: 3307
#
#  producer:
#      build: ./producer
#      container_name: producer
#      restart: on-failure
#      ports:
#        - "8080:8080"
#      depends_on:
#        - producer-db
#
#  consumer-db:
#      image: mysql
#      container_name: consumer-db
#      volumes:
#        - consumer-data:/var/lib/mysql
#      ports:
#        - "3307:3306"
#      environment:
#        MYSQL_ROOT_PASSWORD: root
#        MYSQL_DATABASE: consumer_db
#
#  consumer:
#      build: ./consumer
#      container_name: consumer
#      ports:
#        - "8081:8081"
#      depends_on:
#        - consumer-db
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.2.1
#    hostname: zoo
#    container_name: zoo
#    networks:
#      - kafka_network
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_SERVER_ID: 1
#      ZOOKEEPER_SERVERS: zoo:2888:3888
#
#  kafka:
#    image: confluentinc/cp-kafka:7.2.1
#    hostname: kafka
#    container_name: kafka
#    networks:
#      - kafka_network
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#      - "9999:9999"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
#      KAFKA_BROKER_ID: 1
#      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_JMX_PORT: 9999
#      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
#      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
#      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#    depends_on:
#      - zookeeper
#
#networks:
#  kafka_network:
#    name: kafka_docker_network
#
#volumes:
#  producer-data:
#  consumer-data:

#version: "3.9"
#services:
#  producer-db:
#    image: mysql
#    container_name: producer-db
#    volumes:
#      - producer-data:/var/lib/mysql
#    ports:
#      - "3308:3307"
#    environment:
#      MYSQL_ROOT_PASSWORD: root
#      MYSQL_DATABASE: producer_db
#      MYSQL_TCP_PORT: 3307
#
#  producer:
#    build: ./producer
#    container_name: producer
#    restart: on-failure
#    ports:
#      - "8081:8081"
#    depends_on:
#      - producer-db
#
#  consumer-db:
#    image: mysql
#    container_name: consumer-db
#    volumes:
#      - consumer-data:/var/lib/mysql
#    ports:
#      - "3307:3306"
#    environment:
#      MYSQL_ROOT_PASSWORD: root
#      MYSQL_DATABASE: consumer_db
#
#  consumer:
#    build: ./consumer
#    container_name: consumer
#    ports:
#      - "8080:8080"
#    depends_on:
#      - consumer-db
#
#volumes:
#  producer-data:
#  consumer-data: